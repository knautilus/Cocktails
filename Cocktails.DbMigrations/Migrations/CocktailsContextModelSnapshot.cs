// <auto-generated />
using System;
using Cocktails.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cocktails.DbMigrations.Migrations
{
    [DbContext(typeof(CocktailsContext))]
    partial class CocktailsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cocktails.Entities.Sql.Cocktail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CocktailCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long>("FlavorId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CocktailCategoryId");

                    b.HasIndex("FlavorId");

                    b.ToTable("Cocktail");
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.CocktailCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("CocktailCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Classic"
                        },
                        new
                        {
                            Id = 2L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Modern classic"
                        },
                        new
                        {
                            Id = 3L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Coffee & Dessert"
                        },
                        new
                        {
                            Id = 4L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Shots"
                        },
                        new
                        {
                            Id = 5L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Tropical"
                        },
                        new
                        {
                            Id = 6L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Nonalcoholic"
                        });
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.Flavor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Flavor");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Bitter"
                        },
                        new
                        {
                            Id = 2L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Sweet"
                        },
                        new
                        {
                            Id = 3L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Sour"
                        },
                        new
                        {
                            Id = 4L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Fruity"
                        });
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = 2L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Gin"
                        },
                        new
                        {
                            Id = 3L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Rum"
                        },
                        new
                        {
                            Id = 4L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Tequila"
                        },
                        new
                        {
                            Id = 5L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Tomato juice"
                        },
                        new
                        {
                            Id = 6L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Lemon juice"
                        },
                        new
                        {
                            Id = 7L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Coffee liqueur"
                        });
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.MeasureUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ModifyUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasureUnit");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Oz"
                        },
                        new
                        {
                            Id = 2L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Piece"
                        },
                        new
                        {
                            Id = 3L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Dash"
                        },
                        new
                        {
                            Id = 4L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Cup"
                        },
                        new
                        {
                            Id = 5L,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            CreateUserId = 0L,
                            ModifyDate = new DateTimeOffset(new DateTime(2023, 9, 20, 14, 30, 16, 167, DateTimeKind.Unspecified).AddTicks(7318), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifyUserId = 0L,
                            Name = "Shot"
                        });
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.Mix", b =>
                {
                    b.Property<long>("CocktailId")
                        .HasColumnType("bigint");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("MeasureUnitId")
                        .HasColumnType("bigint");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("Mix");
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.Cocktail", b =>
                {
                    b.HasOne("Cocktails.Entities.Sql.CocktailCategory", "CocktailCategory")
                        .WithMany("Cocktails")
                        .HasForeignKey("CocktailCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cocktails.Entities.Sql.Flavor", "Flavor")
                        .WithMany("Cocktails")
                        .HasForeignKey("FlavorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CocktailCategory");

                    b.Navigation("Flavor");
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.Mix", b =>
                {
                    b.HasOne("Cocktails.Entities.Sql.Cocktail", "Cocktail")
                        .WithMany("Mixes")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cocktails.Entities.Sql.Ingredient", "Ingredient")
                        .WithMany("Mixes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cocktails.Entities.Sql.MeasureUnit", "MeasureUnit")
                        .WithMany("Mixes")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cocktail");

                    b.Navigation("Ingredient");

                    b.Navigation("MeasureUnit");
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.Cocktail", b =>
                {
                    b.Navigation("Mixes");
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.CocktailCategory", b =>
                {
                    b.Navigation("Cocktails");
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.Flavor", b =>
                {
                    b.Navigation("Cocktails");
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.Ingredient", b =>
                {
                    b.Navigation("Mixes");
                });

            modelBuilder.Entity("Cocktails.Entities.Sql.MeasureUnit", b =>
                {
                    b.Navigation("Mixes");
                });
#pragma warning restore 612, 618
        }
    }
}
